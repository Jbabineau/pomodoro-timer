// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778

package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import ()

func setDuration(duration int) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_setDuration_05c4`,
		Function: `function __templ_setDuration_05c4(duration){this.duration = duration;
    this.orignalDuration = duration;
}`,
		Call:       templ.SafeScript(`__templ_setDuration_05c4`, duration),
		CallInline: templ.SafeScriptInline(`__templ_setDuration_05c4`, duration),
	}
}

func pomodoro(name string, duration int) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"timer\"><h3>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(name)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/pomodoro.templ`, Line: 15, Col: 18}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</h3><span id=\"timer-display\"></span><div class=\"timer-controls\"><button id=\"start-timer\">Start</button> <button id=\"stop-timer\" style=\"display: none;\">Stop</button> <button id=\"cancel-timer\">Cancel</button></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = setDuration(duration).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script>\n        let timerInterval;\n        let endTime;\n        const timerDisplay = document.getElementById('timer-display');\n        const startButton = document.getElementById('start-timer');\n        const stopButton = document.getElementById('stop-timer');\n        const cancelButton = document.getElementById('cancel-timer');\n\n        function startTimer() {\n            endTime = Date.now() + duration * 1000;\n            timerInterval = setInterval(updateTimer, 10);\n            startButton.style.display = 'none';\n            stopButton.style.display = 'inline';\n        }\n\n        function stopTimer() {\n            duration = (endTime - Date.now()) / 1000;\n            clearInterval(timerInterval);\n            startButton.style.display = 'inline';\n            stopButton.style.display = 'none';\n        }\n\n        function cancelTimer() {\n            clearInterval(timerInterval);\n            timerDisplay.textContent = formatTime(orignalDuration * 1000);\n            startButton.style.display = 'inline';\n            stopButton.style.display = 'none';\n        }\n\n        function updateTimer() {\n            console.log(\"updating\")\n            const remainingTime = endTime - Date.now();\n            if (remainingTime <= 0) {\n                clearInterval(timerInterval);\n                timerDisplay.textContent = '00:00:00';\n                startButton.style.display = 'inline';\n                stopButton.style.display = 'none';\n            } else {\n                timerDisplay.textContent = formatTime(remainingTime);\n            }\n        }\n\n        function formatTime(remainingTime) {\n            const seconds = Math.floor(remainingTime / 1000);\n            const minutes = Math.floor(seconds / 60);\n            const hours = Math.floor(minutes / 60);\n            const remainingSeconds = seconds % 60;\n            const remainingMinutes = minutes % 60;\n            return `${padZero(hours)}:${padZero(remainingMinutes)}:${padZero(remainingSeconds)}`;\n        }\n\n        function padZero(value) {\n            return value.toString().padStart(2, '0');\n        }\n\n        startButton.addEventListener('click', startTimer);\n        stopButton.addEventListener('click', stopTimer);\n        cancelButton.addEventListener('click', cancelTimer);\n        console.log(duration)\n        timerDisplay.textContent = formatTime(duration*1000)\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
